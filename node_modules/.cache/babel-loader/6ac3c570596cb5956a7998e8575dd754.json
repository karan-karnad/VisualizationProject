{"ast":null,"code":"var _jsxFileName = \"/Users/karankarnad/Projects/react-flask/src/Components/Card.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { FreeCamera, Vector3, HemisphericLight, MeshBuilder, Sound } from \"@babylonjs/core\";\nimport SceneComponent from \"./SceneComponent\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet box;\n\nconst onSceneReady = scene => {\n  // This creates and positions a free camera (non-mesh)\n  var camera = new FreeCamera(\"camera1\", new Vector3(0, 5, -10), scene); // This targets the camera to scene origin\n\n  camera.setTarget(Vector3.Zero());\n  const canvas = scene.getEngine().getRenderingCanvas(); // This attaches the camera to the canvas\n\n  camera.attachControl(canvas, true); // This creates a light, aiming 0,1,0 - to the sky (non-mesh)\n\n  var light = new HemisphericLight(\"light\", new Vector3(0, 1, 0), scene); // Default intensity is 1. Let's dim the light a small amount\n\n  light.intensity = 0.7; // Our built-in 'box' shape.\n\n  box = MeshBuilder.CreateBox(\"box\", {\n    size: 2\n  }, scene); // Move the box upward 1/2 its height\n\n  box.position.y = 1; // Our built-in 'ground' shape.\n\n  MeshBuilder.CreateGround(\"ground\", {\n    width: 10,\n    height: 10\n  }, scene); //Adding sound\n\n  const sound = new Sound(\"sound\", \"https://freesound.org/people/Connum/sounds/23874/\", scene, null, {\n    autoplay: true,\n    loop: true\n  }); //Leave time for the sound file to load before playing it\n\n  sound.play();\n  const box = BABYLON.MeshBuilder.CreateBox(\"box\", {}); //unit cube\n\n  box.scaling = new BABYLON.Vector3(2, 1.5, 3);\n};\n\nconst onRender = scene => {\n  if (box !== undefined) {\n    var deltaTimeInMillis = scene.getEngine().getDeltaTime();\n    const rpm = 10;\n    box.rotation.y += rpm / 60 * Math.PI * 2 * (deltaTimeInMillis / 1000);\n  }\n};\n\nconst Card = () => {\n  _s();\n\n  const [todo, setTodo] = useState([]);\n  useEffect(() => {\n    fetch('/api').then(response => response.json()).then(data => console.log(data));\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"Hello\", /*#__PURE__*/_jsxDEV(SceneComponent, {\n      antialias: true,\n      onSceneReady: onSceneReady,\n      onRender: onRender,\n      id: \"my-canvas\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 13\n  }, this);\n};\n\n_s(Card, \"4iPjF1Dk4tBAVioxtSV8zxHVK4I=\");\n\n_c = Card;\nexport default Card;\n\nvar _c;\n\n$RefreshReg$(_c, \"Card\");","map":{"version":3,"sources":["/Users/karankarnad/Projects/react-flask/src/Components/Card.js"],"names":["React","useState","useEffect","FreeCamera","Vector3","HemisphericLight","MeshBuilder","Sound","SceneComponent","box","onSceneReady","scene","camera","setTarget","Zero","canvas","getEngine","getRenderingCanvas","attachControl","light","intensity","CreateBox","size","position","y","CreateGround","width","height","sound","autoplay","loop","play","BABYLON","scaling","onRender","undefined","deltaTimeInMillis","getDeltaTime","rpm","rotation","Math","PI","Card","todo","setTodo","fetch","then","response","json","data","console","log"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { FreeCamera, Vector3, HemisphericLight, MeshBuilder, Sound } from \"@babylonjs/core\";\nimport SceneComponent from \"./SceneComponent\"; \n\n\nlet box;\n\nconst onSceneReady = (scene) => {\n  // This creates and positions a free camera (non-mesh)\n  var camera = new FreeCamera(\"camera1\", new Vector3(0, 5, -10), scene);\n\n  // This targets the camera to scene origin\n  camera.setTarget(Vector3.Zero());\n\n  const canvas = scene.getEngine().getRenderingCanvas();\n\n  // This attaches the camera to the canvas\n  camera.attachControl(canvas, true);\n\n  // This creates a light, aiming 0,1,0 - to the sky (non-mesh)\n  var light = new HemisphericLight(\"light\", new Vector3(0, 1, 0), scene);\n\n  // Default intensity is 1. Let's dim the light a small amount\n  light.intensity = 0.7;\n\n  // Our built-in 'box' shape.\n  box = MeshBuilder.CreateBox(\"box\", { size: 2 }, scene);\n\n  // Move the box upward 1/2 its height\n  box.position.y = 1;\n\n  // Our built-in 'ground' shape.\n  MeshBuilder.CreateGround(\"ground\", { width: 10, height: 10 }, scene);\n\n  //Adding sound\n  const sound = new Sound(\"sound\", \"https://freesound.org/people/Connum/sounds/23874/\", scene, null, {autoplay: true, loop: true});\n//Leave time for the sound file to load before playing it\n    sound.play();\n\n  const box = BABYLON.MeshBuilder.CreateBox(\"box\", {}); //unit cube\n  box.scaling = new BABYLON.Vector3(2, 1.5, 3);\n\n\n};\n\nconst onRender = (scene) => {\n    if (box !== undefined) {\n      var deltaTimeInMillis = scene.getEngine().getDeltaTime();\n  \n      const rpm = 10;\n      box.rotation.y += (rpm / 60) * Math.PI * 2 * (deltaTimeInMillis / 1000);\n    }\n  };\n\n\nconst Card = () => {\n\nconst [todo, setTodo] = useState([])\n\nuseEffect(() => {\n    fetch('/api').then(response => response.json()).then(data => console.log(data))\n},[])\n    return (<div>\n        \n        Hello\n        <SceneComponent antialias onSceneReady={onSceneReady} onRender={onRender} id=\"my-canvas\" />\n        </div>)\n    }\n\nexport default Card"]},"metadata":{},"sourceType":"module"}