{"ast":null,"code":"var _jsxFileName = \"/Users/karankarnad/Projects/react-flask/src/Components/Card.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { FreeCamera, Vector3, HemisphericLight, MeshBuilder, Sound, Tools } from \"@babylonjs/core\";\nimport SceneComponent from \"./SceneComponent\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet box;\nlet csvArr = [];\n\nconst onSceneReady = scene => {\n  // This creates and positions a free camera (non-mesh)\n  var camera = new FreeCamera(\"camera1\", new Vector3(0, 5, -10), scene); // This targets the camera to scene origin\n\n  camera.setTarget(Vector3.Zero());\n  const canvas = scene.getEngine().getRenderingCanvas(); // This attaches the camera to the canvas\n\n  camera.attachControl(canvas, true); // This creates a light, aiming 0,1,0 - to the sky (non-mesh)\n\n  var light = new HemisphericLight(\"light\", new Vector3(0, 1, 0), scene); // Default intensity is 1. Let's dim the light a small amount\n\n  light.intensity = 0.7; // Our built-in 'box' shape.\n  //   box = MeshBuilder.CreateBox(\"box\", { size: 2 }, scene);\n  //   // Move the box upward 1/2 its height\n  //   box.position.y = 1;\n  //   // Our built-in 'ground' shape.\n  //   MeshBuilder.CreateGround(\"ground\", { width: 10, height: 10 }, scene);\n  //   //Adding sound\n  //   const sound = new Sound(\"sound\", \"https://freesound.org/people/Connum/sounds/23874/\", scene, null, {autoplay: true, loop: true});\n  // //Leave time for the sound file to load before playing it\n  //     sound.play();\n  //   const box1 = new MeshBuilder.CreateBox(\"box\", {}); //unit cube\n  //   box1.scaling = new Vector3(3, 8, 4);\n  //   box1.rotation.y = Math.PI / 4;\n  //   box1.rotation.y = Tools.ToRadians(45);\n  //   const roof =  MeshBuilder.CreateCylinder(\"roof\", {diameter: 1.3, height: 4, tessellation: 3}, scene);\n  //   roof.scaling.x = 0.75;\n  //   roof.rotation.z = Math.PI / 2;\n  //   roof.position.y = 5; \n  //   roof.position.x = 0;\n  //   roof.position.z = 1;\n};\n\nconst onRender = scene => {\n  if (box !== undefined) {\n    var deltaTimeInMillis = scene.getEngine().getDeltaTime();\n    const rpm = 10;\n    box.rotation.y += rpm / 60 * Math.PI * 2 * (deltaTimeInMillis / 1000);\n  }\n\n  if (csvArr.length !== 0 && csvArr.length !== 5) {\n    createGraph(scene);\n  }\n};\n\nconst getInputValue = event => {\n  const x = document.getElementById(\"X\").value;\n  const y = document.getElementById(\"Y\").value;\n  const z = document.getElementById(\"Z\").value; //  box.position.x = x;\n  //  box.position.y = y;\n  //  box.position.z = z;\n};\n\nconst csvToArray = (str, delimiter = \",\") => {\n  // slice from start of text to the first \\n index\n  // use split to create an array from string by delimiter\n  const headers = str.slice(0, str.indexOf(\"\\n\")).split(delimiter); // slice from \\n index + 1 to the end of the text\n  // use split to create an array of each csv value row\n\n  const rows = str.slice(str.indexOf(\"\\n\") + 1).split(\"\\n\"); // Map the rows\n  // split values from each row into an array\n  // use headers.reduce to create an object\n  // object properties derived from headers:values\n  // the object passed as an element of the array\n\n  const arr = rows.map(function (row) {\n    const values = row.split(delimiter);\n    const el = headers.reduce(function (object, header, index) {\n      object[header] = values[index];\n      return object;\n    }, {});\n    return el;\n  }); // return the array\n\n  return arr;\n};\n\nconst createGraph = scene => {\n  csvArr.forEach((element, index) => {\n    console.log(element);\n    const graphBox = new MeshBuilder.CreateBox(`box-${index}`, {\n      size: 2\n    }, scene);\n    graphBox.position.x = parseInt(element[index]['X-cord']);\n    graphBox.position.y = parseInt(element[index]['Y-cord']);\n    graphBox.position.z = 1;\n  });\n};\n\nconst readFile = () => {\n  var reader = new FileReader();\n\n  reader.onload = function () {\n    document.getElementById('out').innerHTML = reader.result;\n    console.log(reader.result);\n    const arrayConverted = csvToArray(reader.result);\n    csvArr.push(arrayConverted);\n  }; // start reading the file. When it is done, calls the onload event defined above.\n\n\n  const textDataFromCSV = reader.readAsText(document.getElementById('csv').files[0]);\n};\n\nconst Card = () => {\n  _s();\n\n  const [todo, setTodo] = useState([]);\n  const [csvArr, setCsvArr] = useState([]);\n  useEffect(() => {\n    fetch('/api').then(response => response.json()).then(data => console.log(data));\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"X\",\n        name: \"name\",\n        placeholder: \"X Axis\",\n        required: true,\n        minlength: \"4\",\n        maxlength: \"8\",\n        size: \"10\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"Y\",\n        name: \"name\",\n        placeholder: \"Y Axis\",\n        required: true,\n        minlength: \"4\",\n        maxlength: \"8\",\n        size: \"10\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"Z\",\n        name: \"name\",\n        placeholder: \"Z Axis\",\n        required: true,\n        minlength: \"4\",\n        maxlength: \"8\",\n        size: \"10\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"button\",\n        value: \"Submit\",\n        id: \"Z\",\n        name: \"name\",\n        placeholder: \"Z Axis\",\n        required: true,\n        minlength: \"4\",\n        maxlength: \"8\",\n        size: \"10\",\n        onClick: getInputValue\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Select local CSV File:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      id: \"csv\",\n      type: \"file\",\n      onChange: readFile\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"output\", {\n      id: \"out\",\n      children: \"file contents will appear here\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(SceneComponent, {\n      antialias: true,\n      onSceneReady: onSceneReady,\n      onRender: onRender,\n      id: \"my-canvas\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 145,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Card, \"E8P2tJQmf3y1p+hhHmL7z/cGGmc=\");\n\n_c = Card;\nexport default Card;\n\nvar _c;\n\n$RefreshReg$(_c, \"Card\");","map":{"version":3,"sources":["/Users/karankarnad/Projects/react-flask/src/Components/Card.js"],"names":["React","useState","useEffect","FreeCamera","Vector3","HemisphericLight","MeshBuilder","Sound","Tools","SceneComponent","box","csvArr","onSceneReady","scene","camera","setTarget","Zero","canvas","getEngine","getRenderingCanvas","attachControl","light","intensity","onRender","undefined","deltaTimeInMillis","getDeltaTime","rpm","rotation","y","Math","PI","length","createGraph","getInputValue","event","x","document","getElementById","value","z","csvToArray","str","delimiter","headers","slice","indexOf","split","rows","arr","map","row","values","el","reduce","object","header","index","forEach","element","console","log","graphBox","CreateBox","size","position","parseInt","readFile","reader","FileReader","onload","innerHTML","result","arrayConverted","push","textDataFromCSV","readAsText","files","Card","todo","setTodo","setCsvArr","fetch","then","response","json","data"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { FreeCamera, Vector3, HemisphericLight, MeshBuilder, Sound, Tools } from \"@babylonjs/core\";\nimport SceneComponent from \"./SceneComponent\"; \n\n\nlet box;\nlet csvArr = [];\nconst onSceneReady = (scene) => {\n  // This creates and positions a free camera (non-mesh)\n  var camera = new FreeCamera(\"camera1\", new Vector3(0, 5, -10), scene);\n\n  // This targets the camera to scene origin\n  camera.setTarget(Vector3.Zero());\n\n  const canvas = scene.getEngine().getRenderingCanvas();\n\n  // This attaches the camera to the canvas\n  camera.attachControl(canvas, true);\n\n  // This creates a light, aiming 0,1,0 - to the sky (non-mesh)\n  var light = new HemisphericLight(\"light\", new Vector3(0, 1, 0), scene);\n\n  // Default intensity is 1. Let's dim the light a small amount\n  light.intensity = 0.7;\n\n  \n\n  // Our built-in 'box' shape.\n//   box = MeshBuilder.CreateBox(\"box\", { size: 2 }, scene);\n\n//   // Move the box upward 1/2 its height\n//   box.position.y = 1;\n\n//   // Our built-in 'ground' shape.\n//   MeshBuilder.CreateGround(\"ground\", { width: 10, height: 10 }, scene);\n\n//   //Adding sound\n//   const sound = new Sound(\"sound\", \"https://freesound.org/people/Connum/sounds/23874/\", scene, null, {autoplay: true, loop: true});\n// //Leave time for the sound file to load before playing it\n//     sound.play();\n\n//   const box1 = new MeshBuilder.CreateBox(\"box\", {}); //unit cube\n//   box1.scaling = new Vector3(3, 8, 4);\n\n//   box1.rotation.y = Math.PI / 4;\n//   box1.rotation.y = Tools.ToRadians(45);\n\n//   const roof =  MeshBuilder.CreateCylinder(\"roof\", {diameter: 1.3, height: 4, tessellation: 3}, scene);\n//   roof.scaling.x = 0.75;\n//   roof.rotation.z = Math.PI / 2;\n//   roof.position.y = 5; \n//   roof.position.x = 0;\n//   roof.position.z = 1;\n\n\n};\n\nconst onRender = (scene) => {\n    if (box !== undefined) {\n      var deltaTimeInMillis = scene.getEngine().getDeltaTime();\n  \n      const rpm = 10;\n      box.rotation.y += (rpm / 60) * Math.PI * 2 * (deltaTimeInMillis / 1000);\n    }\n\n    if (csvArr.length !== 0 && csvArr.length !== 5) {\n      createGraph(scene)\n    }\n  };\n\n\nconst getInputValue = (event) => {\n  const x = document.getElementById(\"X\").value\n  const y = document.getElementById(\"Y\").value\n  const z = document.getElementById(\"Z\").value\n\n//  box.position.x = x;\n//  box.position.y = y;\n//  box.position.z = z;\n}\n\nconst csvToArray = (str, delimiter = \",\") => {\n  // slice from start of text to the first \\n index\n  // use split to create an array from string by delimiter\n  const headers = str.slice(0, str.indexOf(\"\\n\")).split(delimiter);\n\n  // slice from \\n index + 1 to the end of the text\n  // use split to create an array of each csv value row\n  const rows = str.slice(str.indexOf(\"\\n\") + 1).split(\"\\n\");\n\n  // Map the rows\n  // split values from each row into an array\n  // use headers.reduce to create an object\n  // object properties derived from headers:values\n  // the object passed as an element of the array\n  const arr = rows.map(function (row) {\n    const values = row.split(delimiter);\n    const el = headers.reduce(function (object, header, index) {\n      object[header] = values[index];\n      return object;\n    }, {});\n    return el;\n  });\n\n  // return the array\n\n  return arr;\n}\n\nconst createGraph = (scene) => {\n  csvArr.forEach((element,index) => {\n    console.log(element)\n    const graphBox = new MeshBuilder.CreateBox(`box-${index}`, { size: 2 }, scene);\n    graphBox.position.x = parseInt(element[index]['X-cord']);\n    graphBox.position.y = parseInt(element[index]['Y-cord']);\n    graphBox.position.z = 1;\n  });\n}\n\nconst readFile = () => {\n        var reader = new FileReader();\n        reader.onload = function () {\n            document.getElementById('out').innerHTML = reader.result;\n            console.log(reader.result)\n            const arrayConverted = csvToArray(reader.result)\n            csvArr.push(arrayConverted);\n            \n        };\n        // start reading the file. When it is done, calls the onload event defined above.\n        const textDataFromCSV = reader.readAsText(document.getElementById('csv').files[0]);\n        \n\n\n}\n\nconst Card = () => {\n\nconst [todo, setTodo] = useState([])\nconst [csvArr, setCsvArr] = useState([])\n\nuseEffect(() => {\n    fetch('/api').then(response => response.json()).then(data => console.log(data))\n},[])\n    return (\n    <div>    \n        <div>\n        <input type=\"text\" id=\"X\" name=\"name\" placeholder=\"X Axis\" required minlength=\"4\" maxlength=\"8\" size=\"10\" ></input>\n        <input type=\"text\" id=\"Y\" name=\"name\" placeholder=\"Y Axis\" required minlength=\"4\" maxlength=\"8\" size=\"10\"></input>\n        <input type=\"text\" id=\"Z\" name=\"name\" placeholder=\"Z Axis\" required minlength=\"4\" maxlength=\"8\" size=\"10\"></input>\n        <input type=\"button\" value=\"Submit\" id=\"Z\" name=\"name\" placeholder=\"Z Axis\" required minlength=\"4\" maxlength=\"8\" size=\"10\" onClick={getInputValue}></input>\n        </div>\n        <p>Select local CSV File:</p>\n        <input id=\"csv\" type=\"file\" onChange={readFile}></input>\n\n        <output id=\"out\">\n            file contents will appear here\n        </output>\n        <SceneComponent antialias onSceneReady={onSceneReady} onRender={onRender} id=\"my-canvas\" />\n    </div>)\n    }\n\nexport default Card"]},"metadata":{},"sourceType":"module"}