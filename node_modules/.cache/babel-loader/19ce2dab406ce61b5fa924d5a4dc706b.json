{"ast":null,"code":"var _jsxFileName = \"/Users/karankarnad/Projects/react-flask/src/Components/SceneComponent.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useRef } from \"react\";\nimport { Engine, Scene } from \"@babylonjs/core\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default _s(({\n  antialias,\n  engineOptions,\n  adaptToDeviceRatio,\n  sceneOptions,\n  onRender,\n  onSceneReady,\n  ...rest\n}) => {\n  _s();\n\n  const reactCanvas = useRef(null); // set up basic engine and scene\n\n  useEffect(() => {\n    const {\n      current: canvas\n    } = reactCanvas;\n    if (!canvas) return;\n    const engine = new Engine(canvas, antialias, engineOptions, adaptToDeviceRatio);\n    const scene = new Scene(engine, sceneOptions);\n\n    if (scene.isReady()) {\n      onSceneReady(scene);\n    } else {\n      scene.onReadyObservable.addOnce(scene => onSceneReady(scene));\n    }\n\n    engine.runRenderLoop(() => {\n      if (typeof onRender === \"function\") onRender(scene);\n      scene.render();\n    });\n\n    const resize = () => {\n      scene.getEngine().resize();\n    };\n\n    if (window) {\n      window.addEventListener(\"resize\", resize);\n    }\n\n    return () => {\n      scene.getEngine().dispose();\n\n      if (window) {\n        window.removeEventListener(\"resize\", resize);\n      }\n    };\n  }, [antialias, engineOptions, adaptToDeviceRatio, sceneOptions, onRender, onSceneReady]);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: reactCanvas,\n    ...rest\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 10\n  }, this);\n}, \"jMW7+INkxls6DeUQ7OiYGj3ybvw=\");","map":{"version":3,"sources":["/Users/karankarnad/Projects/react-flask/src/Components/SceneComponent.js"],"names":["useEffect","useRef","Engine","Scene","antialias","engineOptions","adaptToDeviceRatio","sceneOptions","onRender","onSceneReady","rest","reactCanvas","current","canvas","engine","scene","isReady","onReadyObservable","addOnce","runRenderLoop","render","resize","getEngine","window","addEventListener","dispose","removeEventListener"],"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,MAApB,QAAkC,OAAlC;AACA,SAASC,MAAT,EAAiBC,KAAjB,QAA8B,iBAA9B;;AAEA,kBAAe,CAAC;AAAEC,EAAAA,SAAF;AAAaC,EAAAA,aAAb;AAA4BC,EAAAA,kBAA5B;AAAgDC,EAAAA,YAAhD;AAA8DC,EAAAA,QAA9D;AAAwEC,EAAAA,YAAxE;AAAsF,KAAGC;AAAzF,CAAD,KAAoG;AAAA;;AACjH,QAAMC,WAAW,GAAGV,MAAM,CAAC,IAAD,CAA1B,CADiH,CAGjH;;AACAD,EAAAA,SAAS,CAAC,MAAM;AACd,UAAM;AAAEY,MAAAA,OAAO,EAAEC;AAAX,QAAsBF,WAA5B;AAEA,QAAI,CAACE,MAAL,EAAa;AAEb,UAAMC,MAAM,GAAG,IAAIZ,MAAJ,CAAWW,MAAX,EAAmBT,SAAnB,EAA8BC,aAA9B,EAA6CC,kBAA7C,CAAf;AACA,UAAMS,KAAK,GAAG,IAAIZ,KAAJ,CAAUW,MAAV,EAAkBP,YAAlB,CAAd;;AACA,QAAIQ,KAAK,CAACC,OAAN,EAAJ,EAAqB;AACnBP,MAAAA,YAAY,CAACM,KAAD,CAAZ;AACD,KAFD,MAEO;AACLA,MAAAA,KAAK,CAACE,iBAAN,CAAwBC,OAAxB,CAAiCH,KAAD,IAAWN,YAAY,CAACM,KAAD,CAAvD;AACD;;AAEDD,IAAAA,MAAM,CAACK,aAAP,CAAqB,MAAM;AACzB,UAAI,OAAOX,QAAP,KAAoB,UAAxB,EAAoCA,QAAQ,CAACO,KAAD,CAAR;AACpCA,MAAAA,KAAK,CAACK,MAAN;AACD,KAHD;;AAKA,UAAMC,MAAM,GAAG,MAAM;AACnBN,MAAAA,KAAK,CAACO,SAAN,GAAkBD,MAAlB;AACD,KAFD;;AAIA,QAAIE,MAAJ,EAAY;AACVA,MAAAA,MAAM,CAACC,gBAAP,CAAwB,QAAxB,EAAkCH,MAAlC;AACD;;AAED,WAAO,MAAM;AACXN,MAAAA,KAAK,CAACO,SAAN,GAAkBG,OAAlB;;AAEA,UAAIF,MAAJ,EAAY;AACVA,QAAAA,MAAM,CAACG,mBAAP,CAA2B,QAA3B,EAAqCL,MAArC;AACD;AACF,KAND;AAOD,GAjCQ,EAiCN,CAACjB,SAAD,EAAYC,aAAZ,EAA2BC,kBAA3B,EAA+CC,YAA/C,EAA6DC,QAA7D,EAAuEC,YAAvE,CAjCM,CAAT;AAmCA,sBAAO;AAAQ,IAAA,GAAG,EAAEE,WAAb;AAAA,OAA8BD;AAA9B;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CAxCD","sourcesContent":["import { useEffect, useRef } from \"react\";\nimport { Engine, Scene } from \"@babylonjs/core\";\n\nexport default ({ antialias, engineOptions, adaptToDeviceRatio, sceneOptions, onRender, onSceneReady, ...rest}) => {\n  const reactCanvas = useRef(null);\n\n  // set up basic engine and scene\n  useEffect(() => {\n    const { current: canvas } = reactCanvas;\n\n    if (!canvas) return;\n\n    const engine = new Engine(canvas, antialias, engineOptions, adaptToDeviceRatio);\n    const scene = new Scene(engine, sceneOptions);\n    if (scene.isReady()) {\n      onSceneReady(scene);\n    } else {\n      scene.onReadyObservable.addOnce((scene) => onSceneReady(scene));\n    }\n\n    engine.runRenderLoop(() => {\n      if (typeof onRender === \"function\") onRender(scene);\n      scene.render();\n    });\n\n    const resize = () => {\n      scene.getEngine().resize();\n    };\n\n    if (window) {\n      window.addEventListener(\"resize\", resize);\n    }\n\n    return () => {\n      scene.getEngine().dispose();\n\n      if (window) {\n        window.removeEventListener(\"resize\", resize);\n      }\n    };\n  }, [antialias, engineOptions, adaptToDeviceRatio, sceneOptions, onRender, onSceneReady]);\n\n  return <canvas ref={reactCanvas} {...rest} />;\n};"]},"metadata":{},"sourceType":"module"}