{"ast":null,"code":"var _jsxFileName = \"/Users/karankarnad/Projects/react-flask/src/Components/Card.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { FreeCamera, Vector3, HemisphericLight, MeshBuilder, Sound, Tools } from \"@babylonjs/core\";\nimport SceneComponent from \"./SceneComponent\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet box;\n\nconst onSceneReady = scene => {\n  // This creates and positions a free camera (non-mesh)\n  var camera = new FreeCamera(\"camera1\", new Vector3(0, 5, -10), scene); // This targets the camera to scene origin\n\n  camera.setTarget(Vector3.Zero());\n  const canvas = scene.getEngine().getRenderingCanvas(); // This attaches the camera to the canvas\n\n  camera.attachControl(canvas, true); // This creates a light, aiming 0,1,0 - to the sky (non-mesh)\n\n  var light = new HemisphericLight(\"light\", new Vector3(0, 1, 0), scene); // Default intensity is 1. Let's dim the light a small amount\n\n  light.intensity = 0.7; // Our built-in 'box' shape.\n\n  box = MeshBuilder.CreateBox(\"box\", {\n    size: 2\n  }, scene); // Move the box upward 1/2 its height\n\n  box.position.y = 1; // Our built-in 'ground' shape.\n\n  MeshBuilder.CreateGround(\"ground\", {\n    width: 10,\n    height: 10\n  }, scene); //Adding sound\n\n  const sound = new Sound(\"sound\", \"https://freesound.org/people/Connum/sounds/23874/\", scene, null, {\n    autoplay: true,\n    loop: true\n  }); //Leave time for the sound file to load before playing it\n\n  sound.play();\n  const box1 = new MeshBuilder.CreateBox(\"box\", {}); //unit cube\n\n  box1.scaling = new Vector3(3, 8, 4);\n  box1.rotation.y = Math.PI / 4;\n  box1.rotation.y = Tools.ToRadians(45);\n  const roof = MeshBuilder.CreateCylinder(\"roof\", {\n    diameter: 1.3,\n    height: 2.2,\n    tessellation: 3\n  }, scene);\n  roof.scaling.x = 0.75;\n  roof.rotation.z = Math.PI / 2;\n  roof.position.y = 9;\n};\n\nconst onRender = scene => {\n  if (box !== undefined) {\n    var deltaTimeInMillis = scene.getEngine().getDeltaTime();\n    const rpm = 10;\n    box.rotation.y += rpm / 60 * Math.PI * 2 * (deltaTimeInMillis / 1000);\n  }\n};\n\nconst Card = () => {\n  _s();\n\n  const [todo, setTodo] = useState([]);\n  useEffect(() => {\n    fetch('/api').then(response => response.json()).then(data => console.log(data));\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"X\",\n        name: \"name\",\n        placeholder: \"X Axis\",\n        required: true,\n        minlength: \"4\",\n        maxlength: \"8\",\n        size: \"10\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"Y\",\n        name: \"name\",\n        placeholder: \"Y Axis\",\n        required: true,\n        minlength: \"4\",\n        maxlength: \"8\",\n        size: \"10\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"Z\",\n        name: \"name\",\n        placeholder: \"Z Axis\",\n        required: true,\n        minlength: \"4\",\n        maxlength: \"8\",\n        size: \"10\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(SceneComponent, {\n      antialias: true,\n      onSceneReady: onSceneReady,\n      onRender: onRender,\n      id: \"my-canvas\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 13\n  }, this);\n};\n\n_s(Card, \"4iPjF1Dk4tBAVioxtSV8zxHVK4I=\");\n\n_c = Card;\nexport default Card;\n\nvar _c;\n\n$RefreshReg$(_c, \"Card\");","map":{"version":3,"sources":["/Users/karankarnad/Projects/react-flask/src/Components/Card.js"],"names":["React","useState","useEffect","FreeCamera","Vector3","HemisphericLight","MeshBuilder","Sound","Tools","SceneComponent","box","onSceneReady","scene","camera","setTarget","Zero","canvas","getEngine","getRenderingCanvas","attachControl","light","intensity","CreateBox","size","position","y","CreateGround","width","height","sound","autoplay","loop","play","box1","scaling","rotation","Math","PI","ToRadians","roof","CreateCylinder","diameter","tessellation","x","z","onRender","undefined","deltaTimeInMillis","getDeltaTime","rpm","Card","todo","setTodo","fetch","then","response","json","data","console","log"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { FreeCamera, Vector3, HemisphericLight, MeshBuilder, Sound, Tools } from \"@babylonjs/core\";\nimport SceneComponent from \"./SceneComponent\"; \n\n\nlet box;\n\nconst onSceneReady = (scene) => {\n  // This creates and positions a free camera (non-mesh)\n  var camera = new FreeCamera(\"camera1\", new Vector3(0, 5, -10), scene);\n\n  // This targets the camera to scene origin\n  camera.setTarget(Vector3.Zero());\n\n  const canvas = scene.getEngine().getRenderingCanvas();\n\n  // This attaches the camera to the canvas\n  camera.attachControl(canvas, true);\n\n  // This creates a light, aiming 0,1,0 - to the sky (non-mesh)\n  var light = new HemisphericLight(\"light\", new Vector3(0, 1, 0), scene);\n\n  // Default intensity is 1. Let's dim the light a small amount\n  light.intensity = 0.7;\n\n  \n\n  // Our built-in 'box' shape.\n  box = MeshBuilder.CreateBox(\"box\", { size: 2 }, scene);\n\n  // Move the box upward 1/2 its height\n  box.position.y = 1;\n\n  // Our built-in 'ground' shape.\n  MeshBuilder.CreateGround(\"ground\", { width: 10, height: 10 }, scene);\n\n  //Adding sound\n  const sound = new Sound(\"sound\", \"https://freesound.org/people/Connum/sounds/23874/\", scene, null, {autoplay: true, loop: true});\n//Leave time for the sound file to load before playing it\n    sound.play();\n\n  const box1 = new MeshBuilder.CreateBox(\"box\", {}); //unit cube\n  box1.scaling = new Vector3(3, 8, 4);\n\n  box1.rotation.y = Math.PI / 4;\n  box1.rotation.y = Tools.ToRadians(45);\n\n  const roof =  MeshBuilder.CreateCylinder(\"roof\", {diameter: 1.3, height: 2.2, tessellation: 3}, scene);\n  roof.scaling.x = 0.75;\n  roof.rotation.z = Math.PI / 2;\n  roof.position.y = 9; \n\n\n};\n\nconst onRender = (scene) => {\n    if (box !== undefined) {\n      var deltaTimeInMillis = scene.getEngine().getDeltaTime();\n  \n      const rpm = 10;\n      box.rotation.y += (rpm / 60) * Math.PI * 2 * (deltaTimeInMillis / 1000);\n    }\n  };\n\n\n\n\nconst Card = () => {\n\nconst [todo, setTodo] = useState([])\n\nuseEffect(() => {\n    fetch('/api').then(response => response.json()).then(data => console.log(data))\n},[])\n    return (<div>    \n        <div>\n        <input type=\"text\" id=\"X\" name=\"name\" placeholder=\"X Axis\" required minlength=\"4\" maxlength=\"8\" size=\"10\"></input>\n        <input type=\"text\" id=\"Y\" name=\"name\" placeholder=\"Y Axis\" required minlength=\"4\" maxlength=\"8\" size=\"10\"></input>\n        <input type=\"text\" id=\"Z\" name=\"name\" placeholder=\"Z Axis\" required minlength=\"4\" maxlength=\"8\" size=\"10\"></input>\n        </div>\n        <SceneComponent antialias onSceneReady={onSceneReady} onRender={onRender} id=\"my-canvas\" />\n        </div>)\n    }\n\nexport default Card"]},"metadata":{},"sourceType":"module"}